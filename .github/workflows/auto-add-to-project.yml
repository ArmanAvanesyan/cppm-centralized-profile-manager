name: "Auto Add Issues to Project & Assign Type"

on:
  issues:
    types:
      - opened

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add Issue to GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwDOABCD12345";  // üîπ Replace with your actual project ID
            const typeFieldId = "PVTSSF_lAHOBXlNW84AzylezgpiP84";  // üîπ Type Field ID
            const statusFieldId = "PVTSSF_lAHOBXlNW84Azylezgphsmc"; // üîπ Status Field ID
            const priorityFieldId = "PVTSSF_lAHOBXlNW84AzylezgpiQJY"; // üîπ Priority Field ID

            const issueNumber = context.payload.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const issueLabels = context.payload.issue.labels.map(label => label.name);

            // üè∑Ô∏è Map Labels to Project Types
            const typeMapping = {
              "feature-category": "17dbd86c", // ‚úÖ This is the only one that gets a status
              "feature": "0a5612da",
              "fr": "d4aafaf2",
              "nfr": "0f218c42",
              "use-case": "febf45b8",
              "constraint": "29d3a189",
              "bug": "2c6e6b3c",
              "enhancement": "f900c906",
              "feature-request": "762ab649",
              "bug-report": "b777d4d9",
              "feedback": "06b09923",
              "question": "3e7bd0aa",
              "documentation-request": "1e44e8c4"
            };

            let assignedTypeId = null;
            for (const label of issueLabels) {
              if (typeMapping[label.toLowerCase()]) {
                assignedTypeId = typeMapping[label.toLowerCase()];
                break;
              }
            }

            // Default Type to "Feature" if no match found
            if (!assignedTypeId) assignedTypeId = typeMapping["feature"];

            // Assign "NEXT" as default status only for Feature Category
            const defaultStatusId = "47fc9ee4";  // üîπ ID for "NEXT" status
            let shouldAssignStatus = assignedTypeId === typeMapping["feature-category"];

            // üè∑Ô∏è Map Labels to Priority (if available)
            const priorityMapping = {
              "high": "028ffd60",
              "medium": "6aa22d96",
              "low": "518ab08f"
            };
            
            let assignedPriorityId = null;
            for (const label of issueLabels) {
              if (priorityMapping[label.toLowerCase()]) {
                assignedPriorityId = priorityMapping[label.toLowerCase()];
                break;
              }
            }

            // üèóÔ∏è 1Ô∏è‚É£ Add Issue to Project
            const addItemMutation = `
              mutation {
                addProjectV2ItemById(input: {projectId: "${projectId}", contentId: "${context.payload.issue.node_id}"}) {
                  item {
                    id
                  }
                }
              }
            `;

            const addItemResponse = await github.graphql(addItemMutation);
            const itemId = addItemResponse.addProjectV2ItemById.item.id;

            console.log(`‚úÖ Issue added to project with ID: ${itemId}`);

            // üèóÔ∏è 2Ô∏è‚É£ Set Type Field
            const setTypeMutation = `
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectId}",
                  itemId: "${itemId}",
                  fieldId: "${typeFieldId}",
                  value: { singleSelectOptionId: "${assignedTypeId}" }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            await github.graphql(setTypeMutation);
            console.log(`‚úÖ Assigned Type: ${assignedTypeId}`);

            // üèóÔ∏è 3Ô∏è‚É£ Set Default Status only if Feature Category
            if (shouldAssignStatus) {
              const setStatusMutation = `
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${statusFieldId}",
                    value: { singleSelectOptionId: "${defaultStatusId}" }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;

              await github.graphql(setStatusMutation);
              console.log(`‚úÖ Assigned Default Status: NEXT`);
            }

            // üèóÔ∏è 4Ô∏è‚É£ Set Priority (if found)
            if (assignedPriorityId) {
              const setPriorityMutation = `
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${priorityFieldId}",
                    value: { singleSelectOptionId: "${assignedPriorityId}" }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              await github.graphql(setPriorityMutation);
              console.log(`‚úÖ Assigned Priority: ${assignedPriorityId}`);
            }
