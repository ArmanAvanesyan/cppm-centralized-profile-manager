name: "Auto Add Issues to Project & Assign Type"

on:
  issues:
    types:
      - opened
      - edited

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add Issue to GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwHOBXlNW84Azyle";  
            const typeFieldId = "PVTSSF_lAHOBXlNW84AzylezgpiP84"; 
            const statusFieldId = "PVTSSF_lAHOBXlNW84Azylezgphsmc"; 
            const priorityFieldId = "PVTSSF_lAHOBXlNW84AzylezgpiQJY"; 

            const issueNumber = context.payload.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const issueLabels = (context.payload.issue.labels || []).map(label => label.name);

            const typeMapping = {
              "feature-category": "17dbd86c", 
              "feature": "0a5612da",
              "fr": "d4aafaf2",
              "nfr": "0f218c42",
              "use-case": "febf45b8",
              "constraint": "29d3a189",
              "bug": "2c6e6b3c",
              "enhancement": "f900c906",
              "feature-request": "762ab649",
              "bug-report": "b777d4d9",
              "feedback": "06b09923",
              "question": "3e7bd0aa",
              "documentation-request": "1e44e8c4"
            };

            let assignedTypeId = typeMapping["feature"];
            for (const label of issueLabels) {
              if (typeMapping[label.toLowerCase()]) {
                assignedTypeId = typeMapping[label.toLowerCase()];
                break;
              }
            }

            console.log(`Issue Labels: ${issueLabels}`);
            console.log(`Assigned Type: ${assignedTypeId}`);

            const defaultStatusId = "47fc9ee4";  
            let shouldAssignStatus = assignedTypeId === typeMapping["feature-category"];

            const priorityMapping = {
              "high": "028ffd60",
              "medium": "6aa22d96",
              "low": "518ab08f"
            };
            
            let assignedPriorityId = null;
            for (const label of issueLabels) {
              if (priorityMapping[label.toLowerCase()]) {
                assignedPriorityId = priorityMapping[label.toLowerCase()];
                break;
              }
            }

            try {
              const addItemMutation = `
                mutation {
                  addProjectV2ItemById(input: {projectId: "${projectId}", contentId: "${context.payload.issue.node_id}"}) {
                    item { id }
                  }
                }
              `;

              const addItemResponse = await github.graphql(addItemMutation);
              const itemId = addItemResponse.addProjectV2ItemById.item.id;
              console.log(`✅ Issue added to project: ${itemId}`);

              const setTypeMutation = `
                mutation {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${typeFieldId}",
                    value: { singleSelectOptionId: "${assignedTypeId}" }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;

              await github.graphql(setTypeMutation);
              console.log(`✅ Assigned Type: ${assignedTypeId}`);

              if (shouldAssignStatus) {
                const setStatusMutation = `
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}",
                      itemId: "${itemId}",
                      fieldId: "${statusFieldId}",
                      value: { singleSelectOptionId: "${defaultStatusId}" }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `;

                await github.graphql(setStatusMutation);
                console.log(`✅ Assigned Default Status: NEXT`);
              }

              if (assignedPriorityId) {
                const setPriorityMutation = `
                  mutation {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: "${projectId}",
                      itemId: "${itemId}",
                      fieldId: "${priorityFieldId}",
                      value: { singleSelectOptionId: "${assignedPriorityId}" }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `;
                await github.graphql(setPriorityMutation);
                console.log(`✅ Assigned Priority: ${assignedPriorityId}`);
              }

            } catch (error) {
              console.error("❌ Error:", error);
            }
