name: "Auto Add Issues to Project & Assign Type"

on:
  issues:
    types:
      - opened
      - edited

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Log Inputs
        run: |
          echo "üîπ Repository: ${{ github.repository }}"
          echo "üîπ Issue Number: ${{ github.event.issue.number }}"
          echo "üîπ Issue Node ID: ${{ github.event.issue.node_id }}"

      - name: Add Issue to GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwHOBXlNW84Azyle"; 
            const issueNodeId = context.payload.issue.node_id;

            if (!issueNodeId) {
              console.error("üö® Issue Node ID is missing.");
              return;
            }

            console.log(`üîπ Adding issue #${context.payload.issue.number} to project ${projectId}...`);

            const mutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `;

            try {
              const response = await github.graphql(mutation, {
                projectId: projectId,
                contentId: issueNodeId
              });

              console.log("‚úÖ Issue successfully added:", response);
            } catch (error) {
              console.error("‚ùå Failed to add issue:", error);
            }

      - name: Assign Type and Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwHOBXlNW84Azyle";
            const typeFieldId = "PVTSSF_lAHOBXlNW84AzylezgpiP84"; 
            const statusFieldId = "PVTSSF_lAHOBXlNW84Azylezgphsmc";
            const priorityFieldId = "PVTSSF_lAHOBXlNW84AzylezgpiQJY"; 

            const issueLabels = (context.payload.issue.labels || []).map(label => label.name.toLowerCase());
            const issueNodeId = context.payload.issue.node_id;

            if (!issueNodeId) {
              console.error("üö® Issue Node ID is missing.");
              return;
            }

            // Mapping Labels to Types
            const typeMapping = {
              "feature-category": "17dbd86c", 
              "feature": "0a5612da",
              "fr": "d4aafaf2",
              "nfr": "0f218c42",
              "use-case": "febf45b8",
              "constraint": "29d3a189",
              "bug": "2c6e6b3c",
              "enhancement": "f900c906",
              "feature-request": "762ab649",
              "bug-report": "b777d4d9",
              "feedback": "06b09923",
              "question": "3e7bd0aa",
              "documentation-request": "1e44e8c4"
            };

            let assignedTypeId = typeMapping["feature"];

            for (const label of issueLabels) {
              if (typeMapping[label]) {
                assignedTypeId = typeMapping[label];
                break;
              }
            }

            console.log(`üîπ Assigning Type: ${assignedTypeId}`);

            // Default Status for Feature Categories
            const statusMapping = {
              "LATER": "f75ad846",
              "NEXT": "47fc9ee4",
              "NOW": "c8fab3fb",
              "DONE": "98236657"
            };

            let assignedStatusId = null;
            if (assignedTypeId === typeMapping["feature-category"]) {
              assignedStatusId = statusMapping["NEXT"];  // Default Feature Categories to NEXT
            }

            // Assign Priority if Found
            const priorityMapping = {
              "high": "028ffd60",
              "medium": "6aa22d96",
              "low": "518ab08f"
            };

            let assignedPriorityId = null;
            for (const label of issueLabels) {
              if (priorityMapping[label]) {
                assignedPriorityId = priorityMapping[label];
                break;
              }
            }

            try {
              // Assign Type
              const setTypeMutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { singleSelectOptionId: $value }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;

              await github.graphql(setTypeMutation, {
                projectId: projectId,
                itemId: issueNodeId,
                fieldId: typeFieldId,
                value: assignedTypeId
              });

              console.log("‚úÖ Type assigned successfully.");

              // Assign Status if it's a Feature Category
              if (assignedStatusId) {
                const setStatusMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { singleSelectOptionId: $value }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `;

                await github.graphql(setStatusMutation, {
                  projectId: projectId,
                  itemId: issueNodeId,
                  fieldId: statusFieldId,
                  value: assignedStatusId
                });

                console.log(`‚úÖ Assigned Default Status: ${assignedStatusId}`);
              }

              // Assign Priority if Found
              if (assignedPriorityId) {
                const setPriorityMutation = `
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId,
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { singleSelectOptionId: $value }
                    }) {
                      projectV2Item { id }
                    }
                  }
                `;

                await github.graphql(setPriorityMutation, {
                  projectId: projectId,
                  itemId: issueNodeId,
                  fieldId: priorityFieldId,
                  value: assignedPriorityId
                });

                console.log("‚úÖ Assigned Priority:", assignedPriorityId);
              }

            } catch (error) {
              console.error("‚ùå Error:", error);
            }

      - name: Debug: List Issues in Project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Fetching all issues in project..."
          gh api graphql -f query='
            query {
              node(id: "PVT_kwHOBXlNW84Azyle") {
                ... on ProjectV2 {
                  items(first: 20) {
                    nodes { id content { ... on Issue { title number } } }
                  }
                }
              }
            }'
