name: "Auto Add Issues to Project & Assign Labels and Status"

on:
  issues:
    types: [opened, edited]

permissions:
  contents: read
  issues: write
  pull-requests: write
  repository-projects: write

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add Issue to GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwHOBXlNW84Azyle"; 
            const issueNodeId = context.payload.issue.node_id;

            if (!issueNodeId) {
              console.error("üö® Issue Node ID is missing.");
              return;
            }

            console.log(`üîπ Adding issue #${context.payload.issue.number} to project ${projectId}...`);

            const mutation = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `;

            try {
              const response = await github.graphql(mutation, {
                projectId: projectId,
                contentId: issueNodeId
              });

              console.log("‚úÖ Issue successfully added:", response);
            } catch (error) {
              console.error("‚ùå Failed to add issue:", error);
            }

      - name: Ensure Labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNodeId = context.payload.issue.node_id;
            if (!issueNodeId) {
              console.error("üö® Issue Node ID is missing.");
              return;
            }

            // Step 1: Fetch Label IDs
            const labelNames = context.payload.issue.labels.map(label => label.name);
            console.log(`üîπ Issue Labels: ${labelNames}`);

            const labelQuery = `
              query {
                repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
                  labels(first: 100) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            `;

            const repoLabels = await github.graphql(labelQuery);
            const allLabels = repoLabels.repository.labels.nodes;

            const labelIds = allLabels
              .filter(label => labelNames.includes(label.name))
              .map(label => label.id);

            if (labelIds.length === 0) {
              console.log("‚ö†Ô∏è No matching label IDs found. Skipping label update.");
              return;
            }

            console.log(`üîπ Label IDs: ${labelIds}`);

            // Step 2: Assign Labels using IDs
            const addLabelsMutation = `
              mutation($itemId: ID!, $labelIds: [ID!]!) {
                updateIssue(input: { id: $itemId, labelIds: $labelIds }) {
                  issue { id }
                }
              }
            `;

            await github.graphql(addLabelsMutation, {
              itemId: issueNodeId,
              labelIds: labelIds
            });

            console.log("‚úÖ Labels successfully assigned.");
